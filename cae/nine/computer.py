#data = "109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99" #quine
#data = "1102,34915192,34915192,7,4,7,99,0" #16 digit number
#data = "104,1125899906842624,99" #large middle number
#data = "3,225,1,225,6,6,1100,1,238,225,104,0,1101,37,61,225,101,34,121,224,1001,224,-49,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1101,67,29,225,1,14,65,224,101,-124,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1102,63,20,225,1102,27,15,225,1102,18,79,224,101,-1422,224,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1102,20,44,225,1001,69,5,224,101,-32,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1102,15,10,225,1101,6,70,225,102,86,40,224,101,-2494,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1102,25,15,225,1101,40,67,224,1001,224,-107,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,2,126,95,224,101,-1400,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1002,151,84,224,101,-2100,224,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,677,224,1002,223,2,223,1006,224,329,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,344,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,7,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,7,677,677,224,1002,223,2,223,1006,224,419,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,224,434,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,449,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,464,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,479,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,509,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,524,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,554,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,569,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,1007,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,614,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,8,677,226,224,102,2,223,223,1006,224,659,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226" #day 5
#data = "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9" #zero if zero, 1 if non zero
#data = "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99" #999 if less than 8, 1000 if 8, 1001 if more than 8
data = "1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,30,1016,1101,37,0,1005,1101,362,0,1023,1101,0,20,1014,1101,39,0,1013,1102,34,1,1007,1101,682,0,1027,1102,664,1,1025,1102,1,655,1028,1101,0,26,1002,1102,1,38,1015,1101,669,0,1024,1101,0,28,1017,1102,1,21,1000,1101,0,27,1012,1102,1,29,1008,1102,1,23,1019,1101,0,24,1011,1101,685,0,1026,1102,646,1,1029,1102,1,369,1022,1101,0,31,1003,1102,1,36,1001,1101,0,0,1020,1102,1,35,1009,1101,32,0,1010,1101,0,1,1021,1102,33,1,1004,1101,22,0,1006,1102,1,25,1018,109,14,1205,6,197,1001,64,1,64,1105,1,199,4,187,1002,64,2,64,109,-4,21107,40,39,9,1005,1019,219,1001,64,1,64,1105,1,221,4,205,1002,64,2,64,109,9,1206,1,239,4,227,1001,64,1,64,1106,0,239,1002,64,2,64,109,-9,2101,0,-8,63,1008,63,26,63,1005,63,261,4,245,1106,0,265,1001,64,1,64,1002,64,2,64,109,-6,2108,37,1,63,1005,63,287,4,271,1001,64,1,64,1105,1,287,1002,64,2,64,109,15,21108,41,44,-2,1005,1017,307,1001,64,1,64,1106,0,309,4,293,1002,64,2,64,109,-16,1207,1,34,63,1005,63,327,4,315,1105,1,331,1001,64,1,64,1002,64,2,64,109,8,1208,-9,29,63,1005,63,347,1106,0,353,4,337,1001,64,1,64,1002,64,2,64,109,4,2105,1,8,1001,64,1,64,1105,1,371,4,359,1002,64,2,64,109,-22,1201,9,0,63,1008,63,27,63,1005,63,391,1106,0,397,4,377,1001,64,1,64,1002,64,2,64,109,18,21107,42,43,5,1005,1016,415,4,403,1106,0,419,1001,64,1,64,1002,64,2,64,109,-8,1201,2,0,63,1008,63,37,63,1005,63,441,4,425,1105,1,445,1001,64,1,64,1002,64,2,64,109,27,1205,-9,463,4,451,1001,64,1,64,1106,0,463,1002,64,2,64,109,-1,1206,-8,475,1105,1,481,4,469,1001,64,1,64,1002,64,2,64,109,-6,21101,43,0,-8,1008,1015,43,63,1005,63,507,4,487,1001,64,1,64,1106,0,507,1002,64,2,64,109,-15,2101,0,-3,63,1008,63,35,63,1005,63,531,1001,64,1,64,1106,0,533,4,513,1002,64,2,64,109,-2,2102,1,-6,63,1008,63,18,63,1005,63,553,1105,1,559,4,539,1001,64,1,64,1002,64,2,64,109,7,21102,44,1,3,1008,1016,44,63,1005,63,581,4,565,1105,1,585,1001,64,1,64,1002,64,2,64,109,-11,1202,7,1,63,1008,63,34,63,1005,63,609,1001,64,1,64,1105,1,611,4,591,1002,64,2,64,109,6,1202,1,1,63,1008,63,35,63,1005,63,637,4,617,1001,64,1,64,1106,0,637,1002,64,2,64,109,16,2106,0,4,4,643,1001,64,1,64,1106,0,655,1002,64,2,64,109,-1,2105,1,1,4,661,1106,0,673,1001,64,1,64,1002,64,2,64,109,5,2106,0,-1,1105,1,691,4,679,1001,64,1,64,1002,64,2,64,109,-24,1208,-2,26,63,1005,63,709,4,697,1105,1,713,1001,64,1,64,1002,64,2,64,109,-10,2102,1,6,63,1008,63,21,63,1005,63,735,4,719,1105,1,739,1001,64,1,64,1002,64,2,64,109,25,21108,45,45,-9,1005,1010,757,4,745,1106,0,761,1001,64,1,64,1002,64,2,64,109,-12,1207,-7,20,63,1005,63,777,1106,0,783,4,767,1001,64,1,64,1002,64,2,64,109,-13,2108,22,6,63,1005,63,799,1106,0,805,4,789,1001,64,1,64,1002,64,2,64,109,17,21102,46,1,0,1008,1011,45,63,1005,63,825,1105,1,831,4,811,1001,64,1,64,1002,64,2,64,109,-6,2107,21,1,63,1005,63,849,4,837,1105,1,853,1001,64,1,64,1002,64,2,64,109,-3,2107,27,0,63,1005,63,873,1001,64,1,64,1105,1,875,4,859,1002,64,2,64,109,12,21101,47,0,0,1008,1014,48,63,1005,63,899,1001,64,1,64,1105,1,901,4,881,4,64,99,21102,27,1,1,21101,0,915,0,1105,1,922,21201,1,42931,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,942,0,0,1106,0,922,21202,1,1,-1,21201,-2,-3,1,21102,1,957,0,1106,0,922,22201,1,-1,-2,1106,0,968,22101,0,-2,-2,109,-3,2106,0,0"

program = [int(x) for x in data.split(',')]
for i in range(0, 1000000):
    program.append(0)

print("ready")

def getValue(program, value, mode, offset):
    if mode == 0:
        return program[value]
    if mode == 1:
        return value
    if mode == 2:
        return program[value+offset]

def getValueLiteral(program, value, mode, offset):
    if mode == 0:
        return value
    if mode == 1:
        raise Exception("not allowed")
    if mode == 2:
        return value + offset

def processInstruction(opcode, parameters, program, relativeBase):
    jump = False
    index = 0

    instruction = str(opcode[3]) + str(opcode[4])

    #add. adds 1 to 2 and stores in 3
    if instruction == "01":
        val1 = getValue(program, parameters[0][0], parameters[0][1], relativeBase)
        val2 = getValue(program, parameters[1][0], parameters[1][1], relativeBase)
        loc = getValueLiteral(program, parameters[2][0], parameters[2][1], relativeBase)
        program[loc] = val1 + val2
        index = len(parameters) + 1

    #mul. multiplies 1 to 2 and stores in 3
    elif instruction == "02":            
        val1 = getValue(program, parameters[0][0], parameters[0][1], relativeBase)
        val2 = getValue(program, parameters[1][0], parameters[1][1], relativeBase)
        loc = getValueLiteral(program, parameters[2][0], parameters[2][1], relativeBase)
        program[loc] = val1 * val2
        index = len(parameters) + 1

    #inp. takes raw input and stores in 1
    elif instruction == "03":
        loc = getValueLiteral(program, parameters[0][0], parameters[0][1], relativeBase)

        program[loc] = int(input())
        index = len(parameters) + 1

    #out. prints 1
    elif instruction == "04":
        val = getValue(program, parameters[0][0], parameters[0][1], relativeBase)
        print(val)
        index = len(parameters) + 1

    #jit. jumps to 2 if 1 is NOT 0
    elif instruction == "05":
        compval = getValue(program, parameters[0][0], parameters[0][1], relativeBase)
        if compval != 0:
            index = getValue(program, parameters[1][0], parameters[1][1], relativeBase)
            jump = True
        else:
            index = len(parameters) + 1

    #jif. jumps to 2 if 1 is 0
    elif instruction == "06":
        compval = getValue(program, parameters[0][0], parameters[0][1], relativeBase)

        if compval == 0:
            index = getValue(program, parameters[1][0], parameters[1][1], relativeBase)
            jump = True
        else:
            index = len(parameters) + 1

    #lt. compares 1 to 2. sets 1 to 3 if less than, sets 0 to 3 otherwise
    elif instruction == "07":
        val1 = getValue(program, parameters[0][0], parameters[0][1], relativeBase)
        val2 = getValue(program, parameters[1][0], parameters[1][1], relativeBase)
        loc = getValueLiteral(program, parameters[2][0], parameters[2][1], relativeBase)
        
        if val1 < val2:
            program[loc] = 1
        else:
            program[loc] = 0
        index = len(parameters) + 1

    #eq. compares 1 to 2. sets 1 to 3 if equal, sets 0 to 3 otherwise
    elif instruction == "08":
        val1 = getValue(program, parameters[0][0], parameters[0][1], relativeBase)
        val2 = getValue(program, parameters[1][0], parameters[1][1], relativeBase)
        loc = getValueLiteral(program, parameters[2][0], parameters[2][1], relativeBase)

        if val1 == val2:
            program[loc] = 1
        else:
            program[loc] = 0
        index = len(parameters) + 1

    elif instruction == "09":
        val = getValue(program, parameters[0][0], parameters[0][1], relativeBase)
        relativeBase = relativeBase + val
        index = len(parameters) + 1

    #end. termination, program instantly halts.
    elif instruction == "99":
        index = -1

    return (index, jump, relativeBase)

index = 0
relative_base = 0
while index < len(program):
    opcode = [int(x) for x in str(program[index])]
    while len(opcode) < 5:
        opcode.insert(0, 0)

    instruction = str(opcode[3]) + str(opcode[4])
    
    if instruction == "01" or instruction == "02" or instruction == "07" or instruction == "08":
        parameters = [(program[index+1], opcode[2]), \
                      (program[index+2], opcode[1]), \
                      (program[index+3], opcode[0])]
    if instruction == "03" or instruction == "04" or instruction == "09":
        parameters = [(program[index+1], opcode[2])]
    if instruction == "05" or instruction == "06":
        parameters = [(program[index+1], opcode[2]), \
                      (program[index+2], opcode[1])]
    if instruction == "99":
        instruction = 99 #this is a shortcut for the opcode
        parameters = []

    #print("opcode {} on parameters {} with relative_base {}".format(opcode, parameters, relative_base))
    indexModifier = processInstruction(opcode, parameters, program, relative_base)
    relative_base = indexModifier[2]

    if indexModifier[0] == -1:
        break
    else:
        if indexModifier[1] == True:
            index = indexModifier[0]
        else:
            index = index + indexModifier[0]
